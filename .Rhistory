resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
debug(goFish)
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("../mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=perfect.sa)))
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
n
load_all("../mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=perfect.sa)))
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
debug(goFish)
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
method(ctrl.mp$ctrl.est)
fbar(stk0)[, ac(ay - 1)]
tracking["F.est", ac(ay)]
ctrl@trgtArray[ac(ay + 1), 
    "val", ]
do.call("mpDispatch", ctrl.is)
Q
load_all("../mse")
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=perfect.sa)))
resp3biem1 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem1)
mpargs$management_lag <- 2
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem2)
tracking(resp3biem2)
tracking(resp3biem1)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
registerDoParallel(3)
mpargs$nblocks <- 3
set.seed(1234)
mpargs$management_lag <- 1
resp3biem0 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem0)
mpargs$management_lag <- 2
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem2)
load_all("../mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
set.seed(1234)
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
mpargs$management_lag <-1
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
traceback()
load_all("../mse")
set.seed(1234)
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
debug(goFish)
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
debug(goFish)
registerDoParallel(1)
mpargs$nblocks <- 1
mpargs$nblocks <- 3
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl@trgtArray[ac(ay + 1), 
    "val", ]
ctrl@trgtArray[ac(genArgs$management_lag),"val",]
ctrl@trgtArray[ac(ay+genArgs$management_lag),"val",]
Q
q(
)
library(devtools)
load_all("../mse")
load_all("../mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
library(FLa4a)
library(doParallel)
library(ggplotFL)
registerDoParallel(1)
mpargs$nblocks <- 3
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
dim(stk)
dim(stk)[6]
load_all("../mse")
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem0b)
resp3biem0b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem0b)
load_all("../mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
set.seed(1234)
resp3biem0 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
all.equal(resp3biem0, resp3biem0b)
plot(resp3biem0)
plot(resp3biem0b)
plot(resp3biem0)
plot(resp3biem0b)
load_all("../mse")
registerDoParallel(3)
mpargs$nblocks <- 3
set.seed(1234)
resp3biem1b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
set.seed(1234)
resp3biem1b <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem1b)
mpargs$management_lag <- 2
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
tracking(resp3biem1b)
load_all("../mse")
registerDoParallel(1)
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("../mse")
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("../mse")
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ls()
ctrl
n
ctrl
genArgs
ctrl@trgtArray[ac(ay+genArgs$management_lag),"val",]
ay
genArgs$management_lag
ctrl@trgtArray
Q
load_all("../mse")
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is),
ctrl.est = mseCtrl(method=sca.sa)))
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl
tracking
Q
iem <- FLiem(method=noise.iem, args=list(fun="rlnorm", mean=0, sd=0, multiplicative=TRUE))
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
tracking
ctrl
tracking["metric.is",ac(genArgs$ay-genArgs$management_lag+1)]
ctrl@trgtArray[,"year",][]
ctrl@trgtArray["year",,][]
ctrl
ctrl
ctrl@trgtArray[,"ay+1",]
ay+1
ctrl@trgtArray[,"auqntity",]
ctrl@trgtArray[,"quantity",]
ctrl@target[,"quantity",]
ac(ctrl@target[,"quantity",])
it
getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it)
getCtrl(tracking["metric.is",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it)
getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it)
ctrl <- getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it)
Q
load_all("../mse")
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ls(
)
tracking
n
stk.om <- do.call("mpDispatch", ctrl.om)$object
Q
load_all("../mse")
resp3biem2 <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3biem2)
Q()
q()
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
library(devtools)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
library(FLa4a)
library(ggplotFL)
library(doParallel)
load("oemTest.RData")
registerDoParallel(3)
mpargs$nblocks <- 3
set.seed(1234)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
mpargs$management_lag <- 2
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
effort.is
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3beff)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
registerDoParallel(1)
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl
ctrl@target[,"quantity",]
ctrl@target[,"rel.year",]
getCtrl
fbar(stk.om)
ctrl@target[,"rel.year",]
ctrl <- getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it)
ctrl@target[,"rel.year",]
getCtrl
ctrl@target[,"rel.year",]
ctrl <- getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it, ctrl@target[,"rel.year",])
ctrl
ctrl.om$ctrl <- ctrl
ctrl.om$stk <- stk.om
ctrl.om$sr <- sr.om
ctrl.om$sr.residuals <- sr.om.res
ctrl.om$sr.residuals.mult <- sr.om.res.mult
ctrl.om$method <- method(projection)
ctrl.om$ioval <- list(iv=list(t1=flsval, t2=flfval), ov=list(t1=flsval))
stk.om <- do.call("mpDispatch", ctrl.om)$object
ctrl.om <- args(projection)
# update with decision made having into account management lag
ctrl <- getCtrl(tracking["metric.iem",ac(genArgs$ay-genArgs$management_lag+1)], ac(ctrl@target[,"quantity",]), ay+1, it, ctrl@target[,"rel.year",])   
ctrl.om$ctrl <- ctrl
ctrl.om$stk <- stk.om
ctrl.om$sr <- sr.om
ctrl.om$sr.residuals <- sr.om.res
ctrl.om$sr.residuals.mult <- sr.om.res.mult
ctrl.om$method <- method(projection)
ctrl.om$ioval <- list(iv=list(t1=flsval, t2=flfval), ov=list(t1=flsval))
stk.om <- do.call("mpDispatch", ctrl.om)$object
fbar(stk.om)
Q
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(1)
mpargs$nblocks <- 3
set.seed(1234)
mpargs$management_lag <- 2
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
ctrl
tracking
n
ctrl
Q
catch(stock(om))
catch(stock(om))[,"2008"] <- 0.2
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(3)
mpargs$nblocks <- 3
set.seed(1234)
mpargs$management_lag <- 2
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
tracking(resp3beff)
plot(resp3beff)
fbar(stock(om))
fbar(stock(om))[,ac(2015:2017)]
quantMeans(fbar(stock(om))[,ac(2015:2017)])
yearMeans(fbar(stock(om))[,ac(2015:2017)])
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
catch(stk)
om <- FLom(stock=stk, sr=srbh, refpts=refpts(brp), projection=proj)#, 
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(3)
mpargs$nblocks <- 3
set.seed(1234)
mpargs$management_lag <- 2
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
catch.inty <- catch(stk.om)[,ac((iy+1):(iy+genArgs$management_lag))]
catch.inty
is.na(catch.inty)
isTRUE(is.na(catch.inty))
sum(is.na(catch.inty))
sum(is.na(catch.inty))>0
sum(is.na(catch.inty))==0
fsq.inty <- fbar(stk.om)[,ac((iy-1):(iy-nsqy))]
fsq.inty
yearMeans(fsq.inty)
fsq.inty <- yearMeans(fbar(stk.om)[,ac((iy-1):(iy-nsqy))])
fsq.inty
fsq.inty <- c(yearMeans(fbar(stk.om)[,ac((iy-1):(iy-nsqy))]))
fsq.inty
Q
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
tracking(resp3beff)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
tracking(resp3beff)
plot(resp3beff)
q()
library(mse)
library(FLa4a)
library(ggplotFL)
library(doParallel)
# LOAD data
data(ple4)
data(ple4.indices)
stk <- ple4
idx <- ple4.indices["BTS-Combined (all)"]
# VARIABLES
it <- 250 # iterations
fy <- 2030 # final year
y0 <- range(stk)["minyear"] # initial OM year
dy <- range(stk)["maxyear"] # final OM year
iy <- dy # initial year of projection (also intermediate)
#ny <- fy - iy + 1 # number of years to project from initial year
nsqy <- 3 # number of years to compute status quo metrics
vy <- ac(iy:fy) # vector of years to be projected
mpargs <- list(fy=fy, y0=y0, iy=iy, nsqy=nsqy)
# ==============================================================================
# OM conditioning
# ==============================================================================
# - Two SRRs: geomean and Bevholt
mcsave <- 500
mcmc <- mcsave*it
fit <- sca(stk, idx, fit="MCMC", mcmc = SCAMCMC(mcmc = mcmc, mcsave = mcsave, mcprobe = 0.4))
stk <- stk + fit
# skin to keep one iteration
stk0 <- qapply(stk, iterMedians)
# Fit a4a model to replicate official assessment w/MCMC
# average recruitment estimation sd
rv1 <- sqrt(mean(c(iterVars(log(rec(stk)))), na.rm=TRUE))
# average autocor lag1
# TODO acf(residuals)
ac1 <- mean(apply(window(rec(stk), end=2008)@.Data, 6, function(x)
  c(acf(c(x), plot=FALSE, lag.max=1)$acf[2])))
# BevHolt
srbh <- fmle(as.FLSR(stk0, model="bevholt"), method="L-BFGS-B", lower=c(1e-6, 1e-6), upper=c(max(rec(stk)) * 3, Inf))
# Residuals
resbh <- ar1rlnorm(rho=ac1, years=dy:fy, iters=it, margSD=rv1*2)
residuals(srbh) <- resbh
# ==============================================================================
# Refpts
# ==============================================================================
brp <- brp(FLBRP(stk0, srbh))
# ==============================================================================
# Set up operating model
# ==============================================================================
# Set up future assumptions - means of 3 years
stk <- fwdWindow(stk, brp, end=2030)
#==============================================================================
# Fleet behaviour
#==============================================================================
fb <- mseCtrl(method=hyperstability.fb, args=list(beta=0.8))
#==============================================================================
# OM projection method
#==============================================================================
proj <- mseCtrl(method=fwd.om, args=list(maxF=2))
#==============================================================================
# OM object
#==============================================================================
om <- FLom(stock=stk, sr=srbh, refpts=refpts(brp), projection=proj)#, fleetBehaviour=fb)
###############################################################################
# OEM settings
###############################################################################
#==============================================================================
# prepare objects
#==============================================================================
stk <- stock(om)
#==============================================================================
# Estimate the indices catchability from the a4a fit (without simulation)
#==============================================================================
set.seed(0)
# Use all indices
idcs <- FLIndices()
for (i in 1:length(idx)){
# this is a simplification as if index reflects 01 January abundances
lst <- mcf(list(idx[[i]]@index, stock.n(stk0)))
# log catchability of index 
idx.lq <- log(lst[[1]]/lst[[2]]) 
# empty quant
idx.qmu <- idx.qsig <- stock.n(iter(stk,1)) 
# Every year has the same mean catchability
idx.qmu[] <- yearMeans(idx.lq) 
idx.qsig[] <- sqrt(yearVars(idx.lq))
idx.q <- FLQuant(NA, dimnames=dimnames(stock.n(stk)))
# Build FLQ of index catchability based on lognormal distribution with mean and sd calculated above
idx.q <- rlnorm(it, idx.qmu, idx.qsig) 
#idx.q[,ac(y0:iy)] <- idx.q[,ac(y0:iy)]
idx_temp <- idx.q * stock.n(stk)
# generate initial index
idx_temp <- FLIndex(index=idx_temp, index.q=idx.q) 
range(idx_temp)[c("startf", "endf")] <- c(0, 0)
idcs[[i]] <- idx_temp
}
names(idcs) <- names(idx)
#==============================================================================
# Deviances for catch.n
#==============================================================================
set.seed(0)
catch.dev <- log(catch.n(stk))
catch.dev <- catch.dev-iterMeans(catch.dev)
Sig <- apply(catch.dev[,ac(y0:dy),1,1,,drop=TRUE], 3, function(x) cov(t(x)))
Sig <- apply(Sig, 1, mean)
Sig <- matrix(Sig, ncol=dim(catch.dev)[1])
catch.dev[,ac(vy)][] <- t(mvrnorm(it * length(vy), rep(0, nrow(Sig)), Sig))
catch.dev <- exp(catch.dev)
#==============================================================================
# OEM object
#==============================================================================
idxDev <- lapply(idcs, index.q)
names(idxDev) <- "index.q"
stkDev <- FLQuants(catch.n=catch.dev)
dev <- list(idx=idxDev, stk=stkDev)
obs <- list(idx=idcs[1], stk=stk)
oem <- FLoem(method=sampling.oem, observations=obs, deviances=dev)
#save(oem, file="oem.RData")
###############################################################################
# Implementation error
###############################################################################
iem <- FLiem(method=noise.iem, args=list(fun="rlnorm", mean=0, sd=0, multiplicative=TRUE))
###############################################################################
# Management procedure
###############################################################################
# general pars, add seed
mpargs$seed <- 1234
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=prefect.sa)))
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(8)
mpargs$nblocks <- 100
set.seed(1234)
mpargs$management_lag <- 2
system.time()
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
system.time()
mpargs$nblocks <- 250
set.seed(1234)
mpargs$management_lag <- 2
resp3beff <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3beff)
system.time()
time()
date()
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=sca.sa)))
registerDoParallel(8)
mpargs$nblocks <- 250
set.seed(1234)
mpargs$management_lag <- 2
date()
resp3beffb <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
date()
plot(resp3beffb)
250/8
250/8*2
250/8/2
q()
library(devtools)
load_all("/home/gamitjo/devel/FLR/pkgs/mse")
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(8)
mpargs$nblocks <- 250
set.seed(1234)
mpargs$management_lag <- 2
library(FLa4a)
library(ggplotFL)
library(doParallel)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=effort.is),
ctrl.est = mseCtrl(method=perfect.sa)))
registerDoParallel(8)
mpargs$nblocks <- 250
set.seed(1234)
mpargs$management_lag <- 2
resp3beffc <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3beffc)
iem <- FLiem(method=noise.iem, args=list(fun="rlnorm", mean=0, sd=0.1, multiplicative=TRUE))
resp3beffb <- mp(om, oem, iem, ctrl.mp=ctrl, genArgs=mpargs)
plot(resp3beffb)
iem
tracking(resp3beffb)
q()
